// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreBluetooth;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
typedef SWIFT_ENUM(NSInteger, CentralManagerState) {
  CentralManagerStateUnknown = 0,
  CentralManagerStateResetting = 1,
  CentralManagerStateUnsupported = 2,
  CentralManagerStateUnauthorized = 3,
  CentralManagerStatePoweredOff = 4,
  CentralManagerStatePoweredOn = 5,
};

@class CBPeripheral;

/**
  接続した端末
*/
SWIFT_CLASS("_TtC10StreetPass19ConnectedDeviceInfo")
@interface ConnectedDeviceInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) CBPeripheral * _Nullable peripheral;
@end

typedef SWIFT_ENUM(NSInteger, ConnectedDeviceStatus) {
  ConnectedDeviceStatusSuccess = 0,
  ConnectedDeviceStatusDisConected = 1,
  ConnectedDeviceStatusFailure = 2,
};

@class NSNumber;

/**
  端末情報
*/
SWIFT_CLASS("_TtC10StreetPass11DeveiceInfo")
@interface DeveiceInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nonnull deviceName;
@property (nonatomic, strong) CBPeripheral * _Nullable peripheral;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable advertisementData;
@property (nonatomic, strong) NSNumber * _Nullable RSSI;
@end

typedef SWIFT_ENUM(NSInteger, PeripheralManagerState) {
  PeripheralManagerStateUnknown = 0,
  PeripheralManagerStateResetting = 1,
  PeripheralManagerStateUnsupported = 2,
  PeripheralManagerStateUnauthorized = 3,
  PeripheralManagerStatePoweredOff = 4,
  PeripheralManagerStatePoweredOn = 5,
};


/**
  受信したデータ
*/
SWIFT_CLASS("_TtC10StreetPass12ReceivedData")
@interface ReceivedData : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nullable data;
@property (nonatomic, strong) CBPeripheral * _Nullable peripheral;
@end

@protocol StreetPassDelegate;
@class CBCentralManager;
@class CBPeripheralManager;
@class CBService;
@class CBATTRequest;
@class CBCentral;
@class CBCharacteristic;

SWIFT_CLASS("_TtC10StreetPass10StreetPass")
@interface StreetPass : NSObject <CBCentralManagerDelegate, CBPeripheralManagerDelegate, CBPeripheralDelegate>
@property (nonatomic, strong) id <StreetPassDelegate> _Nullable delegate;
/**
  開始
*/
- (void)start;
/**
  停止
*/
- (void)stop;
/**
  scanステータス
*/
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
/**
  CentralManager復元(アプリケーション復元時に呼ばれる)
*/
- (void)centralManager:(CBCentralManager * _Nonnull)central willRestoreState:(NSDictionary<NSString *, id> * _Nonnull)dict;
/**
  受信したとき
*/
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
/**
  ペリフェラルに接続したとき
*/
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
/**
  ペリフェラルから切れたとき
*/
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
/**
  ペリフェラルの接続に失敗したとき
*/
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
/**
  peripheral 復元時に呼ばれる
*/
- (void)peripheralManager:(CBPeripheralManager * _Nonnull)peripheral willRestoreState:(NSDictionary<NSString *, id> * _Nonnull)dict;
/**
  peripheralのserviceに追加時に呼ばれる
*/
- (void)peripheralManager:(CBPeripheralManager * _Nonnull)peripheral didAddService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/**
  peripheral managerの状態変化
*/
- (void)peripheralManagerDidUpdateState:(CBPeripheralManager * _Nonnull)peripheral;
/**
  Advertisingが開始したときに呼ばれる
*/
- (void)peripheralManagerDidStartAdvertising:(CBPeripheralManager * _Nonnull)peripheral error:(NSError * _Nullable)error;
/**
  read requestがあった時に呼ばれる
*/
- (void)peripheralManager:(CBPeripheralManager * _Nonnull)peripheral didReceiveReadRequest:(CBATTRequest * _Nonnull)request;
/**
  write requestがあった時に呼ばれる
*/
- (void)peripheralManager:(CBPeripheralManager * _Nonnull)peripheral didReceiveWriteRequests:(NSArray<CBATTRequest *> * _Nonnull)requests;
- (void)peripheralManager:(CBPeripheralManager * _Nonnull)peripheral central:(CBCentral * _Nonnull)central didSubscribeToCharacteristic:(CBCharacteristic * _Nonnull)characteristic;
- (void)peripheralManager:(CBPeripheralManager * _Nonnull)peripheral central:(CBCentral * _Nonnull)central didUnsubscribeFromCharacteristic:(CBCharacteristic * _Nonnull)characteristic;
- (void)peripheralManagerIsReadyToUpdateSubscribers:(CBPeripheralManager * _Nonnull)peripheral;
/**
  service発見時に呼ばれる
*/
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/**
  characteristics発見時に呼ばれる
*/
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/**
  characteristic読み込み時に呼ばれる
*/
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/**
  write完了時に呼ばれる
*/
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/**
  write requestを発行する
*/
- (void)writeData:(NSString * _Nonnull)data peripheral:(CBPeripheral * _Nonnull)peripheral;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP10StreetPass18StreetPassDelegate_")
@protocol StreetPassDelegate
- (void)streetPassError:(NSError * _Nonnull)error;
- (void)receivedData:(ReceivedData * _Nonnull)receivedData;
@optional
- (void)nearByDevices:(DeveiceInfo * _Nonnull)deveiceInfo;
- (void)centralManagerState:(enum CentralManagerState)state;
- (void)peripheralManagerState:(enum PeripheralManagerState)state;
- (void)advertisingState;
- (void)peripheralDidAddService;
- (void)deviceConnectedState:(ConnectedDeviceInfo * _Nonnull)connectedDeviceInfo;
@end

#pragma clang diagnostic pop
